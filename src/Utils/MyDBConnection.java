package Utils;

import java.sql.*;

public class MyDBConnection {
    String Host;
    String UserName;
    String Database;
    String Password;
    
    Connection connection = null;
    PreparedStatement statement = null;
    ResultSet resultSet = null;

    public MyDBConnection(String Host, String UserName, String Password, String Database) {
        this.Host = Host;
        this.UserName = UserName;
        this.Password = Password;
        this.Database = Database;
    }     
     
    public void driverTest() throws Exception {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            throw new Exception("MySQL Driver JDBC not found");
        }
    }

    public boolean isClosed() throws SQLException {
        return connection == null || connection.isClosed();
    }

    public Connection getConnection() throws Exception {
        if (isClosed()) {
            driverTest();
            String url = "jdbc:mysql://" + Host + ":3306/" + Database
                            + "?autoReconnect=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8";
            try {
                connection = DriverManager.getConnection(url, UserName, Password);
            } catch (SQLException e){
                throw new Exception("Unable to connect MySQL server ! " + e);
            }
        }
        return connection;
    }

    public PreparedStatement prepareStatement(String query) throws Exception {
        if (statement == null || statement.isClosed())
            statement = getConnection().prepareStatement(query);
        return statement;
    }

    public PreparedStatement prepareStatement(String query, int autoGeneratedKeys) throws Exception {
        if (statement == null || statement.isClosed())
            statement = getConnection().prepareStatement(query, autoGeneratedKeys);
        return statement;
    }

    public void setParameter(PreparedStatement statement, Object... parameters) {
        try {
            for (int i = 0; i < parameters.length; i++) {
                Object parameter = parameters[i];
                int index = i + 1;
                if (parameter instanceof Long) {
                    statement.setLong(index, (Long) parameter);
                } else if (parameter instanceof String) {
                    statement.setString(index, (String) parameter);
                } else if (parameter instanceof Integer) {
                    statement.setInt(index, (Integer) parameter);
                } else if (parameter instanceof Timestamp) {
                    statement.setTimestamp(index, (Timestamp) parameter);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public ResultSet executeQuery(String query, Object... parameters) throws Exception {
        prepareStatement(query);
        setParameter(statement, parameters);
        resultSet = statement.executeQuery();
        return resultSet;
    }

    public int executeUpdate(String query, Object... parameters) throws Exception {
        prepareStatement(query);
        setParameter(statement, parameters);
        setAutoCommit(false);
        int result = statement.executeUpdate();
        commit();
        return result;
    }

    public ResultSet executeUpdate(String query, int autoGeneratedKeys, Object... parameters) throws Exception {
        prepareStatement(query, autoGeneratedKeys);
        setParameter(statement, parameters);
        setAutoCommit(false);
        statement.executeUpdate();
        resultSet = statement.getGeneratedKeys();
        commit();
        return resultSet;
    }

    public void setAutoCommit(boolean b) throws Exception {
        if (isClosed())
            getConnection();
        connection.setAutoCommit(b);
    }

    public void commit() throws SQLException {
        if (!isClosed())
            connection.commit();
    }

    public void rollback() {
        try {
            if (!isClosed())
                connection.rollback();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
	
    public void Close() throws Exception {
        if (resultSet != null && !resultSet.isClosed()) {
            resultSet.close();
            resultSet = null;
        }
        
        if (statement != null && !statement.isClosed()) {
            statement.close();
            statement = null;
        }
        
        if (connection != null && !connection.isClosed()) {
            connection.close();
            connection = null;
        }       
    }    
}