package com.itblee.util;

import com.mysql.cj.jdbc.MysqlDataSource;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ResourceBundle;

public class ConnectionUtil {

    private static DataSource dbSource;
    private static Connection connection;

    public static DataSource getDataSource() throws SQLException {
        if (dbSource == null) {
            ResourceBundle bundle = ResourceBundle.getBundle("db");
            MysqlDataSource source = new MysqlDataSource();
            source.setServerName(bundle.getString("db.server"));
            source.setPortNumber(Integer.parseInt(bundle.getString("db.port")));
            source.setDatabaseName(bundle.getString("db.name"));
            source.setUser(bundle.getString("db.username"));
            source.setPassword(bundle.getString("db.password"));
            source.setUseSSL(false);
            dbSource = source;
        }
        return dbSource;
    }

    public static Connection getConnection() throws SQLException, ClassNotFoundException {
        if (isClosed())
            connection = getDataSource().getConnection();
        return connection;
    }

    public static void setParameter(PreparedStatement statement, Object... parameters) {
        try {
            for (int i = 0; i < parameters.length; i++) {
                Object parameter = parameters[i];
                int index = i + 1;
                if (parameter == null) {
                    statement.setNull(index, Types.NULL);
                } else if (parameter instanceof String) {
                    statement.setString(index, (String) parameter);
                } else if (parameter instanceof Integer) {
                    statement.setInt(index, (Integer) parameter);
                } else if (parameter instanceof Timestamp) {
                    statement.setTimestamp(index, (Timestamp) parameter);
                } else if (parameter instanceof Date) {
                    statement.setDate(index, (Date) parameter);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static ResultSet executeQuery(String sql, Object... parameters) throws SQLException, ClassNotFoundException {
        PreparedStatement statement = getConnection().prepareStatement(sql);
        setParameter(statement, parameters);
        return statement.executeQuery();
    }

    public static int executeUpdate(String sql, Object... parameters) throws SQLException, ClassNotFoundException {
        PreparedStatement statement = getConnection().prepareStatement(sql);
        setParameter(statement, parameters);
        setAutoCommit(false);
        int result = statement.executeUpdate();
        commit();
        return result;
    }

    public static ResultSet executeUpdate(String sql, int autoGeneratedKeys, Object... parameters) throws SQLException, ClassNotFoundException {
        PreparedStatement statement = getConnection().prepareStatement(sql, autoGeneratedKeys);
        setParameter(statement, parameters);
        setAutoCommit(false);
        statement.executeUpdate();
        ResultSet resultSet = statement.getGeneratedKeys();
        commit();
        return resultSet;
    }

    public static void setAutoCommit(boolean b) throws SQLException {
        if (!isClosed())
            connection.setAutoCommit(b);
    }

    public static void commit() throws SQLException {
        if (!isClosed())
            connection.commit();
    }

    public static void rollback() {
        try {
            getConnection().rollback();
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static void close() throws SQLException {
        if (connection != null && !connection.isClosed()) {
            connection.close();
        }
    }

    public static boolean isClosed() throws SQLException {
        return connection == null || connection.isClosed();
    }
}